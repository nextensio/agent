/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.nxthdr.NxtFlow', null, global);
goog.exportSymbol('proto.nxthdr.NxtFlow.FLOW_TYPE', null, global);
goog.exportSymbol('proto.nxthdr.NxtHdr', null, global);
goog.exportSymbol('proto.nxthdr.NxtHdr.STREAM_OP', null, global);
goog.exportSymbol('proto.nxthdr.NxtOnboard', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nxthdr.NxtOnboard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nxthdr.NxtOnboard.repeatedFields_, null);
};
goog.inherits(proto.nxthdr.NxtOnboard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nxthdr.NxtOnboard.displayName = 'proto.nxthdr.NxtOnboard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nxthdr.NxtOnboard.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nxthdr.NxtOnboard.prototype.toObject = function(opt_includeInstance) {
  return proto.nxthdr.NxtOnboard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nxthdr.NxtOnboard} msg The msg instance to transform.
 * @return {!Object}
 */
proto.nxthdr.NxtOnboard.toObject = function(includeInstance, msg) {
  var f, obj = {
    agent: msg.getAgent(),
    userid: msg.getUserid(),
    uuid: msg.getUuid(),
    accesstoken: msg.getAccesstoken(),
    servicesList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nxthdr.NxtOnboard}
 */
proto.nxthdr.NxtOnboard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nxthdr.NxtOnboard;
  return proto.nxthdr.NxtOnboard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nxthdr.NxtOnboard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nxthdr.NxtOnboard}
 */
proto.nxthdr.NxtOnboard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAgent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.getServicesList().push(value);
      msg.setServicesList(msg.getServicesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.nxthdr.NxtOnboard} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtOnboard.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nxthdr.NxtOnboard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtOnboard.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAgent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getUuid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.nxthdr.NxtOnboard} The clone.
 */
proto.nxthdr.NxtOnboard.prototype.cloneMessage = function() {
  return /** @type {!proto.nxthdr.NxtOnboard} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool agent = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.nxthdr.NxtOnboard.prototype.getAgent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
proto.nxthdr.NxtOnboard.prototype.setAgent = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string userid = 2;
 * @return {string}
 */
proto.nxthdr.NxtOnboard.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtOnboard.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string uuid = 3;
 * @return {string}
 */
proto.nxthdr.NxtOnboard.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtOnboard.prototype.setUuid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.nxthdr.NxtOnboard.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtOnboard.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string services = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.nxthdr.NxtOnboard.prototype.getServicesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>} value  */
proto.nxthdr.NxtOnboard.prototype.setServicesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.nxthdr.NxtOnboard.prototype.clearServicesList = function() {
  jspb.Message.setField(this, 5, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nxthdr.NxtFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nxthdr.NxtFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nxthdr.NxtFlow.displayName = 'proto.nxthdr.NxtFlow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nxthdr.NxtFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.nxthdr.NxtFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nxthdr.NxtFlow} msg The msg instance to transform.
 * @return {!Object}
 */
proto.nxthdr.NxtFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: msg.getSource(),
    dest: msg.getDest(),
    sport: msg.getSport(),
    dport: msg.getDport(),
    proto: msg.getProto(),
    sourceagent: msg.getSourceagent(),
    destagent: msg.getDestagent(),
    originagent: msg.getOriginagent(),
    type: msg.getType(),
    usrattr: msg.getUsrattr()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nxthdr.NxtFlow}
 */
proto.nxthdr.NxtFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nxthdr.NxtFlow;
  return proto.nxthdr.NxtFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nxthdr.NxtFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nxthdr.NxtFlow}
 */
proto.nxthdr.NxtFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSport(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDport(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProto(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceagent(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestagent(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOriginagent(value);
      break;
    case 9:
      var value = /** @type {!proto.nxthdr.NxtFlow.FLOW_TYPE} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsrattr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.nxthdr.NxtFlow} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtFlow.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nxthdr.NxtFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtFlow.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSport();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getDport();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getProto();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getSourceagent();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getDestagent();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getOriginagent();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = this.getUsrattr();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.nxthdr.NxtFlow} The clone.
 */
proto.nxthdr.NxtFlow.prototype.cloneMessage = function() {
  return /** @type {!proto.nxthdr.NxtFlow} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setSource = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setDest = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 sport = 3;
 * @return {number}
 */
proto.nxthdr.NxtFlow.prototype.getSport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.nxthdr.NxtFlow.prototype.setSport = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 dport = 4;
 * @return {number}
 */
proto.nxthdr.NxtFlow.prototype.getDport = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.nxthdr.NxtFlow.prototype.setDport = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 proto = 5;
 * @return {number}
 */
proto.nxthdr.NxtFlow.prototype.getProto = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.nxthdr.NxtFlow.prototype.setProto = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string sourceAgent = 6;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getSourceagent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setSourceagent = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string destAgent = 7;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getDestagent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setDestagent = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string originAgent = 8;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getOriginagent = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setOriginagent = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional FLOW_TYPE type = 9;
 * @return {!proto.nxthdr.NxtFlow.FLOW_TYPE}
 */
proto.nxthdr.NxtFlow.prototype.getType = function() {
  return /** @type {!proto.nxthdr.NxtFlow.FLOW_TYPE} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {!proto.nxthdr.NxtFlow.FLOW_TYPE} value  */
proto.nxthdr.NxtFlow.prototype.setType = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string usrattr = 10;
 * @return {string}
 */
proto.nxthdr.NxtFlow.prototype.getUsrattr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.nxthdr.NxtFlow.prototype.setUsrattr = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.nxthdr.NxtFlow.FLOW_TYPE = {
  L4: 0,
  PROXY: 1,
  L3: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nxthdr.NxtHdr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nxthdr.NxtHdr.oneofGroups_);
};
goog.inherits(proto.nxthdr.NxtHdr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.nxthdr.NxtHdr.displayName = 'proto.nxthdr.NxtHdr';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nxthdr.NxtHdr.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.nxthdr.NxtHdr.HdrCase = {
  HDR_NOT_SET: 0,
  ONBOARD: 3,
  FLOW: 4
};

/**
 * @return {proto.nxthdr.NxtHdr.HdrCase}
 */
proto.nxthdr.NxtHdr.prototype.getHdrCase = function() {
  return /** @type {proto.nxthdr.NxtHdr.HdrCase} */(jspb.Message.computeOneofCase(this, proto.nxthdr.NxtHdr.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nxthdr.NxtHdr.prototype.toObject = function(opt_includeInstance) {
  return proto.nxthdr.NxtHdr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nxthdr.NxtHdr} msg The msg instance to transform.
 * @return {!Object}
 */
proto.nxthdr.NxtHdr.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamid: msg.getStreamid(),
    streamop: msg.getStreamop(),
    onboard: (f = msg.getOnboard()) && proto.nxthdr.NxtOnboard.toObject(includeInstance, f),
    flow: (f = msg.getFlow()) && proto.nxthdr.NxtFlow.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nxthdr.NxtHdr}
 */
proto.nxthdr.NxtHdr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nxthdr.NxtHdr;
  return proto.nxthdr.NxtHdr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nxthdr.NxtHdr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nxthdr.NxtHdr}
 */
proto.nxthdr.NxtHdr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStreamid(value);
      break;
    case 2:
      var value = /** @type {!proto.nxthdr.NxtHdr.STREAM_OP} */ (reader.readEnum());
      msg.setStreamop(value);
      break;
    case 3:
      var value = new proto.nxthdr.NxtOnboard;
      reader.readMessage(value,proto.nxthdr.NxtOnboard.deserializeBinaryFromReader);
      msg.setOnboard(value);
      break;
    case 4:
      var value = new proto.nxthdr.NxtFlow;
      reader.readMessage(value,proto.nxthdr.NxtFlow.deserializeBinaryFromReader);
      msg.setFlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.nxthdr.NxtHdr} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtHdr.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nxthdr.NxtHdr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.nxthdr.NxtHdr.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStreamid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getStreamop();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getOnboard();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nxthdr.NxtOnboard.serializeBinaryToWriter
    );
  }
  f = this.getFlow();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nxthdr.NxtFlow.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.nxthdr.NxtHdr} The clone.
 */
proto.nxthdr.NxtHdr.prototype.cloneMessage = function() {
  return /** @type {!proto.nxthdr.NxtHdr} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 streamid = 1;
 * @return {number}
 */
proto.nxthdr.NxtHdr.prototype.getStreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.nxthdr.NxtHdr.prototype.setStreamid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional STREAM_OP streamop = 2;
 * @return {!proto.nxthdr.NxtHdr.STREAM_OP}
 */
proto.nxthdr.NxtHdr.prototype.getStreamop = function() {
  return /** @type {!proto.nxthdr.NxtHdr.STREAM_OP} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.nxthdr.NxtHdr.STREAM_OP} value  */
proto.nxthdr.NxtHdr.prototype.setStreamop = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional NxtOnboard onboard = 3;
 * @return {proto.nxthdr.NxtOnboard}
 */
proto.nxthdr.NxtHdr.prototype.getOnboard = function() {
  return /** @type{proto.nxthdr.NxtOnboard} */ (
    jspb.Message.getWrapperField(this, proto.nxthdr.NxtOnboard, 3));
};


/** @param {proto.nxthdr.NxtOnboard|undefined} value  */
proto.nxthdr.NxtHdr.prototype.setOnboard = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.nxthdr.NxtHdr.oneofGroups_[0], value);
};


proto.nxthdr.NxtHdr.prototype.clearOnboard = function() {
  this.setOnboard(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.nxthdr.NxtHdr.prototype.hasOnboard = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional NxtFlow flow = 4;
 * @return {proto.nxthdr.NxtFlow}
 */
proto.nxthdr.NxtHdr.prototype.getFlow = function() {
  return /** @type{proto.nxthdr.NxtFlow} */ (
    jspb.Message.getWrapperField(this, proto.nxthdr.NxtFlow, 4));
};


/** @param {proto.nxthdr.NxtFlow|undefined} value  */
proto.nxthdr.NxtHdr.prototype.setFlow = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.nxthdr.NxtHdr.oneofGroups_[0], value);
};


proto.nxthdr.NxtHdr.prototype.clearFlow = function() {
  this.setFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.nxthdr.NxtHdr.prototype.hasFlow = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.nxthdr.NxtHdr.STREAM_OP = {
  NOOP: 0,
  CLOSE: 1,
  FLOW_CONTROL: 2
};

goog.object.extend(exports, proto.nxthdr);
